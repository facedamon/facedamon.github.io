<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang/base on FaceDamon`s Blog</title>
    <link>http://facedamon.github.io/categories/golang/base/</link>
    <description>Recent content in golang/base on FaceDamon`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Mar 2020 17:08:56 +0800</lastBuildDate>
    
	<atom:link href="http://facedamon.github.io/categories/golang/base/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[golang base(十一) | 分布式网络爬虫]</title>
      <link>http://facedamon.github.io/post/golang/base/11.%E5%88%86%E5%B8%83%E5%BC%8F%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</link>
      <pubDate>Fri, 06 Mar 2020 17:08:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/11.%E5%88%86%E5%B8%83%E5%BC%8F%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</guid>
      <description>原因 有一定的复杂性 可以灵活调整项目的复杂性 平衡语言/爬虫之间的比重 爬虫分类 通用爬虫，如baidu，google 聚焦爬虫，从互联网获取结构化数</description>
    </item>
    
    <item>
      <title>[golang base(十) | 广度优先搜索]</title>
      <link>http://facedamon.github.io/post/golang/base/10.%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Thu, 05 Mar 2020 15:29:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/10.%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</guid>
      <description>广度优先算法 为爬虫实战做好准备 应用广泛，综合性强 面试常见 &amp;emsp;&amp;emsp;上图中是一个6*5的迷宫，0 代表可以走，1 代表墙，从左上角进</description>
    </item>
    
    <item>
      <title>[golang base(九) | 标准库]</title>
      <link>http://facedamon.github.io/post/golang/base/9.http%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Thu, 05 Mar 2020 14:48:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/9.http%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>http 使用http客户端发送请求 使用http.Client控制请求头部等 使用httputil简化工作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description>
    </item>
    
    <item>
      <title>[golang base(八) | 再谈channel]</title>
      <link>http://facedamon.github.io/post/golang/base/8.channel/</link>
      <pubDate>Wed, 04 Mar 2020 20:01:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/8.channel/</guid>
      <description>转载自 https://www.cnblogs.com/sparkdev/ 转载自 https://go-zh.org/ref/mem golang官网内存模型分析 转载自 https://taohuawu.club/high-performance-implementation-of-goroutine-pool 忠告 &amp;emsp;&amp;emsp;程序在修改被多个Go程同时访问的数据时必须序列化该访问。要序</description>
    </item>
    
    <item>
      <title>[golang base(八) | goroutine &amp; channel]</title>
      <link>http://facedamon.github.io/post/golang/base/8.-goroutine/</link>
      <pubDate>Wed, 04 Mar 2020 20:00:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/8.-goroutine/</guid>
      <description>goroutine 1 2 3 4 5 6 7 8 9 10 11 12 package main func main() { for i := 0; i &amp;lt; 10; i++ { go func(i int){ for { fmt.Printf(&amp;#34;Hello from goroutine %d\n&amp;#34;, i) } }(i) } time.Sleep(time.Millisecond) } &amp;emsp;&amp;emsp;如果不加go关键字的话，就是外循</description>
    </item>
    
    <item>
      <title>[golang base(七) | 测试与性能调优]</title>
      <link>http://facedamon.github.io/post/golang/base/7.%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link>
      <pubDate>Sun, 01 Mar 2020 13:05:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/7.%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid>
      <description>Debugging Sucks and Testing Rocks 测试 传统测试 VS 表格驱动测试 传统测试 1 2 3 4 @Test public void testAdd() { assertEquals(3, add(1, 2)); assertEquals(Integer.MIN_VALUE, add(1, Integer.MAX_VALUE)); } 测试数据和测试逻辑混在一起 出错信息不明确 一旦一个数据出错测试全部</description>
    </item>
    
    <item>
      <title>[golang base(六) | 错误处理]</title>
      <link>http://facedamon.github.io/post/golang/base/6.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 28 Feb 2020 17:45:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/6.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>资源管理与出错处理 defer调用 确保在函数结束时调用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main func tryDefer() { defer fmt.Println(1) defer fmt.Println(2) fmt.Println(3) panic(&amp;#34;error occurr&amp;#34;) /</description>
    </item>
    
    <item>
      <title>[golang base(五) | 函数式编程]</title>
      <link>http://facedamon.github.io/post/golang/base/5.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 28 Feb 2020 17:36:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/5.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>函数式编程 函数式编程 VS 函数指针 函数是一等公民：参数，变量，返回值都可以是函数 闭包 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main func adder() func(int) int { sum := 0 // 自由变</description>
    </item>
    
    <item>
      <title>[golang base(四) | 面向接口]</title>
      <link>http://facedamon.github.io/post/golang/base/4.%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 28 Feb 2020 17:23:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/4.%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/</guid>
      <description>接口 duck typing 大黄鸭是不是一个鸭子? 传统类型系统：脊索动物，脊椎动物亚门，鸟纲雁形目。。。:no duck typing :yes，像鸭子走路，像鸭子叫，那么就是鸭子 描</description>
    </item>
    
    <item>
      <title>[golang base(三) | 面向对象]</title>
      <link>http://facedamon.github.io/post/golang/base/3.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 28 Feb 2020 17:07:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/3.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>结构体和方法 golang仅支持封装，不支持继承和多态 golang没有class，只有struct golang结构体没有构造方法这一说法 1 2 3</description>
    </item>
    
    <item>
      <title>[golang base(二) | 内建容器]</title>
      <link>http://facedamon.github.io/post/golang/base/2.%E5%86%85%E5%BB%BA%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Fri, 28 Feb 2020 15:09:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/2.%E5%86%85%E5%BB%BA%E5%AE%B9%E5%99%A8/</guid>
      <description>数组 &amp;emsp;&amp;emsp;数量写在类型的前面 1 2 3 4 5 6 7 8 9 10 11 func main() { // var 需要确定大小，可以不用初始化赋值 var arr1 [5]int // 简化，需要确定大小，需</description>
    </item>
    
    <item>
      <title>[golang base(一) | 基础语法]</title>
      <link>http://facedamon.github.io/post/golang/base/1.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 28 Feb 2020 14:09:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/1.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>变量定义 &amp;emsp;&amp;emsp;在golang中变量名在前变量类型在后 &amp;emsp;&amp;emsp;这样设计的初衷是什么?我们回想一下使用其它语言</description>
    </item>
    
  </channel>
</rss>