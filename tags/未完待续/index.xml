<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>未完待续 on FaceDamon`s Blog</title>
    <link>http://facedamon.github.io/tags/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/</link>
    <description>Recent content in 未完待续 on FaceDamon`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 21 Oct 2020 15:14:56 +0800</lastBuildDate>
    
	<atom:link href="http://facedamon.github.io/tags/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[分布式缓存 (七) | Protobuf]</title>
      <link>http://facedamon.github.io/post/golang/cache/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-rpc/</link>
      <pubDate>Wed, 21 Oct 2020 15:14:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/cache/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-rpc/</guid>
      <description>为什么要使用protobuf protobuf既Protocol Buffers, Google开发的一种数据描述语言，是一种轻便高效的结构化数据存储格式，与语</description>
    </item>
    
    <item>
      <title>[Redis | 进阶]</title>
      <link>http://facedamon.github.io/post/redis/%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Mon, 31 Aug 2020 16:14:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/redis/%E8%BF%9B%E9%98%B6/</guid>
      <description>事务 &amp;emsp;&amp;emsp;在微博中，用户之间是&amp;rdquo;关注&amp;rdquo;和&amp;rdquo;被关注&amp;rdquo;的关系。如果要使用Red</description>
    </item>
    
    <item>
      <title>[微服务设计(三) | 集成技术]</title>
      <link>http://facedamon.github.io/post/books/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/3.-%E9%9B%86%E6%88%90/</link>
      <pubDate>Mon, 24 Aug 2020 16:55:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/books/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/3.-%E9%9B%86%E6%88%90/</guid>
      <description>摘要 &amp;emsp;&amp;emsp;微服务之间通信方式的选择非常多样化，但哪个是正确的呢？SOAP? XML-RPC? REST? Protocol Buffers? 后面会逐一讨论，在此之前需要考虑的是，我</description>
    </item>
    
    <item>
      <title>[mongodb (一) | 基本操作]</title>
      <link>http://facedamon.github.io/post/mongodb/1.-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 09 Jun 2020 09:09:42 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/mongodb/1.-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>基本操作 创建document 1 2 #use dbname use chapter; 删除document 1 2 3 #db.dropDatabase() use chapter; db.dropDatabase() 创建collection 1 2 3 #db.createCollection(name, options) # example 集合空间大小614299KB</description>
    </item>
    
    <item>
      <title>[nginx (一) | nginx准备]</title>
      <link>http://facedamon.github.io/post/nginx/1.nginx%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 16 Apr 2020 14:23:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/nginx/1.nginx%E5%9F%BA%E7%A1%80/</guid>
      <description>准备环境 &amp;emsp;&amp;emsp;首先需要一个内核为Linux 2.6及以上版本的操作系统，因为Linux 2.6及以上内核才支持epoll。在l</description>
    </item>
    
    <item>
      <title>[golang base(十一) | 分布式网络爬虫]</title>
      <link>http://facedamon.github.io/post/golang/base/11.%E5%88%86%E5%B8%83%E5%BC%8F%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</link>
      <pubDate>Fri, 06 Mar 2020 17:08:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/base/11.%E5%88%86%E5%B8%83%E5%BC%8F%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</guid>
      <description>原因 有一定的复杂性 可以灵活调整项目的复杂性 平衡语言/爬虫之间的比重 爬虫分类 通用爬虫，如baidu，google 聚焦爬虫，从互联网获取结构化数</description>
    </item>
    
    <item>
      <title>[大型网站技术架构 | 架构模式]</title>
      <link>http://facedamon.github.io/post/books/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/1.-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 15 Oct 2019 10:13:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/books/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/1.-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</guid>
      <description>概述 为了解决大型网站面临的高并发访问、海量数据处理、高可靠运行等一系列问题和挑战，大型互联网概述在实践中提出了许多解决方案，以实现网站高性能</description>
    </item>
    
    <item>
      <title>[实战笔记(二) | Go command]</title>
      <link>http://facedamon.github.io/post/golang/effective-golang/%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0%E4%BA%8C-go-command/</link>
      <pubDate>Mon, 14 Oct 2019 01:41:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/golang/effective-golang/%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0%E4%BA%8C-go-command/</guid>
      <description>转载自 https://www.flysnow.org Go开发工具概览 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Go is a tool for managing for Go source code. Usage: go command [arguments] The command are: build compile packages and dependencies clean remove object files doc show documentation for package or symbol env print Go environment information</description>
    </item>
    
  </channel>
</rss>